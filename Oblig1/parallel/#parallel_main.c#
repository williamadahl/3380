#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mpi.h>
#include <unistd.h>


typedef struct {

  float** image_data;
  char* storage; // Brukes for kontinuerlig lagring
  int m; // height
  int n; // length
} image;


void import_JPEG_file(const char *filename, unsigned char **image_chars, int *image_height,
   int *image_width, int *num_components);

void export_JPEG_file(const char *filename, unsigned char *image_chars, int image_height,
   int image_width, int num_components, int quality);



void allocate_image(image *u, int m, int n);
void deallocate_image(image *u);
void convert_jpeg_to_image(const unsigned char* image_chars, image *u);
void convert_image_to_jpeg(const image *u, unsigned char* image_chars);
void iso_diffusion_denoising(image *u, image *u_bar, float kappa);


int main (int argc , char *argv[]) {

  int m, n, c, iters;
  int my_m, my_n, my_rank, num_procs;
  int *children_data;  //placeholder for information on size of childrens data sets
  int counter;
  int proc_m; // Proc 0s way to caluclate m for each process ;)
  float kappa;
  image u, u_bar, whole_image;
  unsigned char *image_chars;
  unsigned char *my_image_chars;
  char *input_jpeg_filename;
  char *output_jpeg_filename;

  int global_counter;  // kan evnt slette denne

bare tull få errer

  MPI_Init (&argc, &argv);
  MPI_Comm_rank (MPI_COMM_WORLD, &my_rank);
  MPI_Comm_size (MPI_COMM_WORLD, &num_procs);
  MPI_Status status;


  /*
    Checking if input is correct
  */

  if(argc != 5){
    fprintf(stderr, "Usage: arguments %s\n",argv[0]);
    exit(EXIT_FAILURE);
  }

  if((kappa = atof(argv[1])) <= 0){
    fprintf(stderr, "Usage: kappa too small or invalid : '%s'\n",argv[1]);
    exit(EXIT_FAILURE);
  }
  // printf(" kappa : %f \n", kappa);


  if((iters = atoi(argv[2])) < 3){
    fprintf(stderr, "Usage: iter too small must be run with at least 3 processes: '%s'\n",argv[2]);
    exit(EXIT_FAILURE);
  }

  // printf(" Iters : %d\n",iters);

  input_jpeg_filename = argv[3];
  // printf("input name : %s\n", input_jpeg_filename);

  output_jpeg_filename = argv[4];
  // printf("output name : %s\n", output_jpeg_filename);


  /*
    Alle prosesser er klar til å recieve sin my_m fra prosess 0.
  */

  if(my_rank > 0){
    MPI_Recv(&my_m, 1, MPI_INT, 0, 666, MPI_COMM_WORLD, &status);
  //  printf("My rank is %d and my_m is : %d\n",my_rank, my_m);
  }


  if(my_rank == 0){  // Inne i process 0


    printf("\n\n\n HER STARTER TESTPRINTER INNE I PROSESS 0 \n\n\n");
    import_JPEG_file(input_jpeg_filename, &image_chars, &m, &n, &c);
    allocate_image(&whole_image, m, n);
  //  convert_jpeg_to_image(image_chars, &whole_image);



/*
 * Plassholder for lengden på alle barns data.
 */
    if((children_data =  malloc(num_procs* sizeof(int))) == NULL){
      perror("Failed to allocate sizes chart for each process data size");
      exit(EXIT_FAILURE);
    }
    //printf("Length of this array : %d \n", (int)(sizeof(children_data)/children_data[0]));

    int rest = m%(num_procs-1);  //-1 siden proc 0 ikke skal regne

  //  printf("Overal rest is : %d\n",rest);

  /*
   *  Dele opp data til barneprosessene og legge inn i arrayet for oversikt til senere
   */


    for(counter = 1;counter < num_procs; counter ++){

      if(counter < rest +1 ){ // hvis man er mindre en mudolo så gir jeg de en ekstra linje for rettferdighet

          proc_m = (m/(num_procs-1)) +1;

          if(counter == 1 || counter == num_procs-1){  // er man borderline skal men ha +1
            proc_m += 1;
        //    printf("This is process : %d My !UPDATED! My_m : %d \n", counter, proc_m );
          }

          else{ // e r man i midten skal man ha +2 for overlapping
            proc_m += 2;
          }



          MPI_Send(&proc_m, 1, MPI_INT, counter, 666, MPI_COMM_WORLD);
          children_data[counter] = proc_m;
/*
          MPI_Sendrecv(&proc_m, 1, MPI_INT, counter, 420, &my_m, 1, MPI_INT, 0, 420, MPI_COMM_WORLD, &status);
*/

      } // end for alle som skal ha ekstra pga modulo og de er sjekket for å være borderline

      else{  // om man er storre en modulo skal man ha vanlig antall + de ma man evnt trenger for overlapp

        proc_m = (m/(num_procs-1));
      //  printf("This is process : %d  and My_m is : %d \n",counter, proc_m);

        if(counter == 1 || counter == num_procs-1){  // er man borderline skal men ha +1
          proc_m += 1;

        }

        else{ // er man i midten skal man ha +2
          proc_m += 2;
        }

        MPI_Send(&proc_m, 1, MPI_INT, counter, 666, MPI_COMM_WORLD);
        children_data[counter] = proc_m;
      //  MPI_Sendrecv(&proc_m, 1, MPI_INT, counter, 420, &my_m, 1, MPI_INT, 0, 420, MPI_COMM_WORLD, &status);

      }


    }

     // end for
     printf("\n\n\n HER ENDER TESTPRINTER INNE I PROSESS 0 \n\n\n");

  } // ute av process 0

/**#################################################################################################
*#################################################################################################
**#################################################################################################
*/



  MPI_Bcast (&m, 1, MPI_INT, 0, MPI_COMM_WORLD);
  MPI_Bcast (&n, 1, MPI_INT, 0, MPI_COMM_WORLD);


  if(my_rank > 0){ //1---x


    my_n = n;
    /*
    *  Allokering av plass for delbildet i arbeiderene
    */
  //  printf("My rank is %d my_m is : %d my_n is : %d\n",my_rank, my_m, my_n);
    allocate_image (&u, my_m, my_n);
    allocate_image (&u_bar, my_m, my_n);
    //printf("Successfull allocation of images in %d\n",my_rank);

    /*
     * Allokering av plass i et kontonuerlig array
     */

     if((my_image_chars = (unsigned char*)malloc((my_m*my_n)*sizeof(unsigned char))) == NULL){
      perror("Failed malloc pointer to matrix");
      exit(EXIT_FAILURE);
    }

    /*
     * Recieve all image chars for iso_diffusion_denoising.
     */

     MPI_Recv(&my_image_chars[0], my_n*my_m, MPI_UNSIGNED_CHAR, 0,
              420, MPI_COMM_WORLD, &status);

      // int ix;
      //
      // for(ix = 0; ix < 100; ix++){
      //     printf("I am : %d and these are my chars : %c\n",my_rank, my_image_chars[ix]);
      // }


      convert_jpeg_to_image(my_image_chars, &u);

      /*
       * Lets defuse that shitttttttt
       */

      //  if (my_rank == 4){
       //
       //
      //    for(ix = 0; ix < 100; ix++){
      //     printf("I am : %d and these are my chars : %c\n",my_rank, my_image_chars[ix]);
      //   }
       //
      //   printf("Ferdig å printe fra image_chars\n");
      //   int i;
      //   int j;
       //
      //   for(i = 0; i < 5 ; i++){
      //     for(j = 0; j < 5; j++){
      //       printf("Verdi i image_data[%d][%d] :  %d\n",i,j, u.image_data[i][j]);
      //     }
      //   }
       //
       //
      //   for(i = 0; i < 5; i++ ){
      //     printf("Verdi i storage[%d] :  %d\n",i, u.storage[i]);
      //   }








       int upper = 1;
       int bottom = num_procs-1;


       for(counter = 0; counter < iters; counter++){

         iso_diffusion_denoising(&u, &u_bar, kappa);

         if((my_rank != upper) && (my_rank != bottom)){


            MPI_Sendrecv(&u.image_data[0][0], my_n, MPI_UNSIGNED_CHAR, my_rank-1, 666,
             &u.image_data[my_m-1][0], my_n ,MPI_UNSIGNED_CHAR, my_rank-1 , 666 , MPI_COMM_WORLD, &status);



             MPI_Sendrecv(&u.image_data[my_m-1][0], my_n,MPI_UNSIGNED_CHAR, my_rank+1, 666,
               &u.image_data[0][0],my_n, MPI_UNSIGNED_CHAR, my_rank+1 , 666 , MPI_COMM_WORLD, &status);

         }

         if(my_rank == upper){



           MPI_Sendrecv(&u.image_data[my_m-1][0], my_n, MPI_UNSIGNED_CHAR, my_rank+1, 666,
             &u.image_data[0][0],my_n, MPI_UNSIGNED_CHAR, my_rank+1 , 666 , MPI_COMM_WORLD, &status);
         }



         if(my_rank == bottom){

            MPI_Sendrecv(&u.image_data[0][0], my_n,MPI_UNSIGNED_CHAR, my_rank-1, 666,
               &u.image_data[my_m-1][0],my_n, MPI_UNSIGNED_CHAR, my_rank-1 , 666 , MPI_COMM_WORLD, &status);

         }


    }//Ute av ISOdenoising


    /*
     *   Prøver å sende resultat tilbake pls work ok bye
     */

       u.m = my_m;
       u.n = my_n;

      convert_image_to_jpeg(&u, my_image_chars);


      // if(my_rank == 1){
      //
      //   printf("Im trying to send : %d\n",(my_m*my_n) );
      //   MPI_Send(&my_image_chars[0], 2435265, MPI_UNSIGNED_CHAR, 0, 1337, MPI_COMM_WORLD);
      // }

      if(my_rank == 1){
        export_JPEG_file(output_jpeg_filename, image_chars, my_m, my_n, 1, 75);
      }

      //  deallocate_image(&u);
      //  deallocate_image(&u_bar);


   }  // Ute av slaver







  else{ // I prosess 0

    // printf(" Denne linjen er i prosess 0 \n");
    // printf("Number of procs : %d\n",num_procs );

    counter = 0;
    int slave;

    /*
     *  Prosess 0 sender mengden og data til hver av arbeiderene
     */

    for(slave = 1; slave <  num_procs; slave++){
    //  printf("Verdi i pos [%d]  : %d\n", slave, children_data[slave]);

      MPI_Send(&image_chars[counter], children_data[slave], MPI_UNSIGNED_CHAR, slave,
                420, MPI_COMM_WORLD);

      counter += proc_m*slave;

    }

    printf("Jeg har klar å sende data\n" );


    /*
     * Få data tilbake fra children
     */

    //  for(slave = 1; slave <  num_procs; slave++){
    //  //  printf("Verdi i pos [%d]  : %d\n", slave, children_data[slave]);
     //
    //    MPI_Recv(&image_chars[counter], proc_m * n, MPI_UNSIGNED_CHAR, slave, 1337, MPI_COMM_WORLD,
    //             &status);
     //
    //    counter += proc_m*slave;
    //  }



      MPI_Recv(&image_chars[0], 2435265, MPI_UNSIGNED_CHAR, 1, 1337, MPI_COMM_WORLD,
             &status);


     //convert_image_to_jpeg(&whole_image, image_chars);

    // export_JPEG_file(output_jpeg_filename, image_chars, m, n, 1, 75);

  }





  // if (my_rank==0) {
  //   convert_image_to_jpeg(&whole_image, image_chars);
  //   export_JPEG_file(output_jpeg_filename, image_chars, m, n, c, 75);
  //   deallocate_image (&whole_image);
  // }
  //
  // deallocate_image (&u);
  // deallocate_image (&u_bar);



  MPI_Finalize();

  return 0;
}






/*
 * @param
 *
 *
 * Exits on any failure on systemscalls
*/

 void allocate_image(image *u, int m, int n){


   int i;
   memcpy(&u->m,&m,sizeof(int));
   memcpy(&u->n,&n,sizeof(int));

   printf("\n##########    allocate_image     ################ \n");
   printf(" m and n i allocate : %d %d \n", m,n);

  //  if((u->storage = (float*)malloc(m*n*sizeof(float))) == NULL){ /*Bruker en kontinuerlig  */
  //   perror("Failed malloc pointer to matrix");                     /*lagrings struktur for å */
  //   exit(EXIT_FAILURE);                                            /*forenkle send   */
  // }


   if((u->image_data = (float**)malloc(m * sizeof(float*))) == NULL){
    perror("Failed malloc pointer to matrix");
    exit(EXIT_FAILURE);
   }


   for(i = 0; i < m; i++){
     if((u->image_data[i] = (float*)malloc(n * sizeof(float))) == NULL){
       perror("Inner malloc");
       free(u->image_data);
       exit(EXIT_FAILURE);
     }
   }

  //  for(i = 0; i < m; i++){
  //    u->image_data[i] = &(u->storage[i*n]);
  //  }


 }

void deallocate_image(image *u){

  int i;

  // printf("My m in deallocate_image : %d\n",u->m);
  // printf("My n in deallocate_image : %d \n",u->n );

  for(i = 0; i < u->m; i++){
    free(u->image_data[i]);
  }

  free(u->storage);
  free(u->image_data);

}

void convert_jpeg_to_image(const unsigned char* image_chars, image *u){

    int i, j;


printf("\n##########    convert_jpeg_to_image     ################ \n");

printf(" m and n i allocate : %d %d \n", u->m, u->n);


    for(i = 0; i < u->m ; i++){
      for(j = 0; j < u->n; j++){
        u->image_data[i][j] = (float)image_chars[i*u->n+j];
      }
    }

}

//konverterer en image struct til array av chars
void convert_image_to_jpeg(const image *u, unsigned char* image_chars){

  int i,j;

  for(i = 0; i < u->m ; i++){
    for(j = 0; j < u->n; j++){
       image_chars[i*u->n+j]= (unsigned char)u->image_data[i][j];
    }
  }

  // for(i = 0; i < (u->m*u->n); i++){
  //   image_chars[i]= (unsigned char)u->storage[i];
  // }

}

/*
 * Velger å kjøre en iterasjon per iso_diffusion_denoising, slik at det blir lettere
 * med send og recv innad i prosessene
 */

void iso_diffusion_denoising(image *u, image *u_bar, float kappa){

  int i, j, counter;


    for(i = 0; i < u->m ; i++){
      for(j = 0; j < u->n ; j++){

        if((1 <= i) &&  (i <= (u->m -2)) && (1 <= j) && (j <= (u->n-2))){

          u_bar->image_data[i][j] = u->image_data[i][j] + kappa*(u->image_data[i-1][j] +
             u->image_data[i][j-1] + u->image_data[i][j+1] + u->image_data[i+1][j] -
              4*u->image_data[i][j]);
        }
        else{

          u_bar->image_data[i][j] = u->image_data[i][j]; //Bounday pixels are copied into u_bar
        }
      }
    }

    //TODO: se om det er mulig å kopiere tilbake i samme for-løkke som over

  for(i = 0 ; i < u->m ; i++){
      for(j = 0; j < u->n ; j++){
        u->image_data[i][j] = u_bar->image_data[i][j];
    }
  }



}
